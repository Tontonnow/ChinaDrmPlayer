/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
//#include "Log.h"
//#include <string>
#include "ChinaDrmParser.h"
/* Header for class com_chinadrm_demo_ChinaDrmDecrypt */

#ifndef _Included_com_chinadrm_demo_ChinaDrmDecrypt
#define _Included_com_chinadrm_demo_ChinaDrmDecrypt
#ifdef __cplusplus
extern "C" {
#endif

char *jstringToCString(JNIEnv *env, jstring jstr) {
    const char *rtn = env->GetStringUTFChars(jstr, 0);

    char *pDest = NULL;
     if (rtn != NULL) {
           int count = strlen(rtn);
           pDest = new char[count + 1];
           memset(pDest, 0, count + 1);
           memcpy(pDest, rtn, count);
     }
    env->ReleaseStringUTFChars(jstr, rtn);
    return pDest;
}

static char *gSdcardPath = NULL;

/*
 * Class:     com_chinadrm_demo_ChinaDrmDecrypt
 * Method:    decrypt
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z
 */
JNIEXPORT jstring JNICALL Java_com_chinadrm_demo_ChinaDrmDecrypt_decrypt(JNIEnv *env, jobject, jstring license, jstring inputPath, jstring outputPath) {
    //std::string strLicense = jstringToCString(env, license);
    //std::string strInputFile = jstringToCString(env, inputPath);
    //std::string strOutputFile = jstringToCString(env, outputPath);

    //static char *strLicense = "AgAAATADAQAnAgAgrBfrbkppdWqDmR9MWAf/98NGe9Y8NVd96Yrqc8ZpgWUCAAAAAwIANwEAMBmj4YjVFUbMEH6A6W9sfqf3ld6tu2NsSacEPx27NEeGNrNZ2Ht1SCSUigq584ZMAwEAAgD/AwAkAQAAIPl85b+7EAuvFobgcrbFemQFPskv+0inVXQ38HwthRoH";
    //static char *strInputFile = "/sdcard/input.bbts";
    //static char *strOutputFile = "/sdcard/output.ts";
    //int check = access(strInputFile.c_str(), F_OK);
    //UNILOGD("exist:%d, readable:%d ", access(strInputFile.c_str(), F_OK), access(strInputFile.c_str(), R_OK));
    //int licenseLength = strlen(strLicense);

    MediaInfo  info;
    ChinaDrmParser cl;

    char szInputFile[256] = { 0 };
    char szOutputFile[256] = { 0 };
    char szMediaFile[256] = { 0 };
    char sdcard[128] = { 0 };
    const char  *mediaFile =  "/media_info.txt";

    if (gSdcardPath != NULL){
        memcpy(sdcard, gSdcardPath, strlen(gSdcardPath));
        memcpy(sdcard + strlen(sdcard), "/", 1);

        memcpy(szMediaFile, gSdcardPath, strlen(gSdcardPath));
        memcpy(szMediaFile+ strlen(szMediaFile),  mediaFile, strlen(mediaFile));
    } else {
           const char *defaultPath = "/sdcard/";
           memcpy(sdcard, defaultPath, strlen(defaultPath));
           memcpy(szMediaFile, defaultPath, strlen(defaultPath));
           memcpy(szMediaFile + strlen(szMediaFile), mediaFile, strlen(mediaFile));
    }

    UNILOGD("media file:%s", szMediaFile);
    if (!cl.parseMediaInfo(szMediaFile, info)){
        UNILOGD("parser media info failed");
        return env->NewStringUTF("");
    }
    cl.setLicense(info.license, strlen(info.license), NULL, 0);

    memset(szInputFile, 0, sizeof(szInputFile));
    memcpy(szInputFile, sdcard, strlen(sdcard));
    memcpy(szInputFile + strlen(sdcard), info.inputFile, strlen(info.inputFile));

    memset(szOutputFile, 0, sizeof(szOutputFile));
    memcpy(szOutputFile, sdcard, strlen(sdcard));
    memcpy(szOutputFile + strlen(sdcard), info.outputFile, strlen(info.outputFile));

    UNILOGD("ChinaDrmDecrypt, license:%s, inputFile:%s, outputFile:%s, mediaFile:%s ", info.license, szInputFile, szOutputFile, szMediaFile);
    cl.parseTsData(szInputFile, szOutputFile);

    return env->NewStringUTF(szOutputFile);;
}

JNIEXPORT void JNICALL Java_com_chinadrm_demo_ChinaDrmDecrypt_setSdcardPath(JNIEnv *env, jobject, jstring sdcardPath) {
    gSdcardPath = jstringToCString(env, sdcardPath);


    UNILOGD("sdcard path:%s", gSdcardPath);
}

JNIEXPORT void JNICALL Java_com_chinadrm_demo_ChinaDrmDecrypt_destroied(JNIEnv *env, jobject) {
    if (gSdcardPath != NULL) {
        UNILOGD("destroied");
        delete []gSdcardPath;
    }
}

#ifdef __cplusplus
}
#endif
#endif